#pragma once
/**
 * @file		vector.hpp
 * @brief		??????????
 *
 * @author		masterLazy
 * @copyright	Copyright (c) 2025 masterLazy
 */

#include "mlib/fastmath.hpp"
namespace mlib {
	namespace fastmath {
		/**
		 * @brief			??????????
		 * @details			???????, ??????????????????????(CRTP)
		 * @param Float		???????
		 * @param Derived	?????
		 */
		template <typename Float, typename Derived> class Vector {
		public:
			/**
			 * @brief	??????
			 * @return	???????
			 */
			virtual size_t size() const = 0;

			/**
			 * @brief		???????
			 * @param res	???????
			 * @return		????
			 */
			virtual Derived& nagate(Result* res = nullptr) = 0;

			/**
			 * @brief			?????
			 * @param another	??????
			 * @param res		???????
			 * @return			????
			 */
			virtual Derived& add(const Derived& another, Result* res = nullptr) = 0;
			/**
			 * @brief		????????
			 * @param f		??????
			 * @param res	???????
			 * @return		????
			 */
			virtual Derived& add(Float f, Result* res = nullptr) = 0;

			/**
			 * @brief			?????
			 * @param another	??????
			 * @param res		???????
			 * @return			????
			 */
			virtual Derived& sub(const Derived& another, Result* res = nullptr) = 0;
			/**
			 * @brief		????????
			 * @param f		??????
			 * @param res	???????
			 * @return		????
			 */
			virtual Derived& sub(Float f, Result* res = nullptr) = 0;

			/**
			 * @brief			????
			 * @param another	??????
			 * @param res		???????
			 * @return			????
			 */
			virtual Derived& mul(const Derived& another, Result* res = nullptr) = 0;
			/**
			 * @brief		???????
			 * @param f		??????
			 * @param res	???????
			 * @return		????
			 */
			virtual Derived& mul(Float f, Result* res = nullptr) = 0;

			/**
			 * @brief			?????
			 * @param another	??????
			 * @param res		???????
			 * @return			????
			 */
			virtual Derived& div(const Derived& another, Result* res = nullptr) = 0;
			/**
			 * @brief		???????
			 * @param f		??????
			 * @param res	???????
			 * @return		????
			 */
			virtual Derived& div(Float f, Result* res = nullptr) = 0;

			/**
			 * @brief			?????
			 * @param another	????????
			 * @param res		???????
			 * @return			????
			 */
			virtual Derived& pow(const Derived& another, Result* res = nullptr) = 0;
			/**
			 * @brief		???????????
			 * @param f		????????
			 * @param res	???????
			 * @return		????
			 */
			virtual Derived& pow(Float f, Result* res = nullptr) = 0;
		};
	} // namespace fastmath
} // namespace mlib